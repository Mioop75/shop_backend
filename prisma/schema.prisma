// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Use uuid
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  avatar        String?
  email         String
  name          String          @unique
  description   String?
  ratings       Float           @default(0)
  password      String
  role          Role            @relation(references: [id], fields: [role_id], onDelete: NoAction)
  role_id       Int
  Product       Product[]
  createdAt     DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(3)
  User_Sessions User_Sessions[] @relation("user_session")
  orders        Order[]
}

model Role {
  id   Int        @id @default(autoincrement())
  name Role_Names
  User User[]
}

enum Role_Names {
  Admin
  Seller
  User
}

model User_Sessions {
  id        Int      @id @default(autoincrement())
  sid       String   @unique
  user_id   Int
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  expires   DateTime @db.Timestamptz(3)
  user      User     @relation("user_session", references: [id], fields: [user_id], onDelete: Cascade)
}

model Product {
  id          Int          @id @default(autoincrement())
  image       String?
  name        String       @unique
  description String
  available   Int          @default(0)
  price       Float        @default(0)
  ratings     Float        @default(0)
  photos      String[]
  author      User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int
  createdAt   DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime     @updatedAt @db.Timestamptz(3)
  categories  Category[]
  Order_Item  Order_Item[]
}

model Category {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  posts Product[]
}

model Order {
  id           Int          @id @default(autoincrement())
  status       Order_Status @default(Pending)
  total        Int
  orders_items Order_Item[]
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
}

model Order_Item {
  id         Int     @id @default(autoincrement())
  product_id Int
  quantity   Int     @default(1)
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  Order      Order?  @relation(fields: [orderId], references: [id])
  orderId    Int?
}

enum Order_Status {
  Pending
  Payed
  Rejected
}
